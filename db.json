{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"source/assets/abouthim/avatars/avatar1.ico","path":"assets/abouthim/avatars/avatar1.ico","modified":0,"renderable":0},{"_id":"source/assets/abouthim/avatars/avatar1.png","path":"assets/abouthim/avatars/avatar1.png","modified":0,"renderable":0},{"_id":"source/assets/abouthim/avatars/avatar2.png","path":"assets/abouthim/avatars/avatar2.png","modified":0,"renderable":0},{"_id":"source/assets/abouthim/avatars/avatar1.medium.png","path":"assets/abouthim/avatars/avatar1.medium.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1646401991180},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1646402011848},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1646402010744},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1646402010744},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1646402011848},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1646402005756},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1646402011849},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1646402011852},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1646402011852},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1646402011852},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1646402011852},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1646402011852},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1646402007260},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1646402011853},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1646402007266},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1646402010570},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1646402007259},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1646402007259},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1646402007259},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1646402007262},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1646402007260},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1646402007262},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1646402007265},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1646402007262},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1646402007266},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1646402007264},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1646402007259},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1646402007267},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1646402010949},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1646402010954},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1646402010950},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1646402010743},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1646402007257},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1646402007260},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1646402007263},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1646402007261},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1646402010952},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1646402007268},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1646402007265},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1646402010953},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1646402010950},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1646402010951},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1646402010951},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1646402010950},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1646402010952},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1646402010952},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1646402010953},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1646402010954},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1646402010953},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1646402010953},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1646402010685},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1646402010742},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1646402011848},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1646402011708},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1646402009278},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1646402010948},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1646402011488},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646402010569},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1646402011359},{"_id":"source/_posts/My-New-Post.md","hash":"44d4f7b04618b209bcf2033ba336c311a87fbad2","modified":1647057829229},{"_id":"themes/hexo-theme-Klise/layout/partials/_comments/valine.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646404038932},{"_id":"themes/hexo-theme-Klise/README.md","hash":"46632cc98832610810d5e91915d27f836d577711","modified":1646404038949},{"_id":"themes/hexo-theme-Klise/package.json","hash":"30c58009b3db3e2db5ec0d39532a70eba7217d62","modified":1646404038950},{"_id":"themes/hexo-theme-Klise/.editorconfig","hash":"3036325288c2bdf484691e761250264acdf9916c","modified":1646404038949},{"_id":"themes/hexo-theme-Klise/_config.yml","hash":"50552bb27892947af23b1e75f9d72792ca3f622d","modified":1646404402531},{"_id":"themes/hexo-theme-Klise/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1646404038921},{"_id":"themes/hexo-theme-Klise/layout/archive.ejs","hash":"359bfefb60b26646f9e5e23e51703614bccc0e94","modified":1646404038926},{"_id":"themes/hexo-theme-Klise/layout/404.ejs","hash":"ac63d244d7d18daa9209c4d4b251454661431f63","modified":1646404038922},{"_id":"themes/hexo-theme-Klise/layout/category.ejs","hash":"eff775fe7fd96bf30b3b5b785a047903c22cd702","modified":1646404038923},{"_id":"themes/hexo-theme-Klise/layout/layout.ejs","hash":"71b48d409a5c68252b41b0b55cfcadac092bfeb2","modified":1646404038927},{"_id":"themes/hexo-theme-Klise/layout/index.ejs","hash":"3bfca860c5912b30aa601ea00016304a3cb17a71","modified":1646404038925},{"_id":"themes/hexo-theme-Klise/layout/tag.ejs","hash":"66671b925d6a22d4d602ddd6712e491822087af8","modified":1646404038927},{"_id":"themes/hexo-theme-Klise/layout/page.ejs","hash":"d5802e5f6b13ae007f126303af2929ba2f8d1930","modified":1646404038928},{"_id":"themes/hexo-theme-Klise/layout/tags.ejs","hash":"88276835029efa09cb942a784475fae83a16930f","modified":1646404038928},{"_id":"themes/hexo-theme-Klise/scripts/404.js","hash":"4a53453dd18258cc9800cf0e2bbb88a160f2e7c0","modified":1646404038951},{"_id":"themes/hexo-theme-Klise/layout/post.ejs","hash":"5cddd27b8c761bf495a95330371377c28a108da3","modified":1646404038924},{"_id":"themes/hexo-theme-Klise/scripts/year.js","hash":"bae1adb64ddd4c3dd1e452fdeced9855d291216f","modified":1646404038952},{"_id":"themes/hexo-theme-Klise/layout/partials/foot.ejs","hash":"1fec091068d1e0214cfc962030daf5bfd562ac1c","modified":1646404038934},{"_id":"themes/hexo-theme-Klise/layout/partials/head.ejs","hash":"23b956e81a9dd323148866ea5533a44f760562b6","modified":1646404038935},{"_id":"themes/hexo-theme-Klise/layout/partials/header.ejs","hash":"ff59fa9d53fd6247624b0af0572228874059adac","modified":1646404038933},{"_id":"themes/hexo-theme-Klise/layout/partials/pagination.ejs","hash":"beaa965dfdc13ed1c8d6ed2d9c1a46f3a715e011","modified":1646404038930},{"_id":"themes/hexo-theme-Klise/source/css/main.scss","hash":"1fd8c5e60223cafae3655f0cf0db7949eafcb27c","modified":1646404038938},{"_id":"themes/hexo-theme-Klise/layout/partials/recent-posts.ejs","hash":"000cfedb84f6c46ce13f5851d7c485b83f44f291","modified":1646404038936},{"_id":"themes/hexo-theme-Klise/layout/partials/scripts.ejs","hash":"aa199709dbc6b6a5e0bbe00670b28f27bca65c48","modified":1646404038929},{"_id":"themes/hexo-theme-Klise/source/js/main.js","hash":"ae187e7dfae77e0f1821de7cd84843b5ae8abf06","modified":1646404038946},{"_id":"themes/hexo-theme-Klise/source/img/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1646404038948},{"_id":"themes/hexo-theme-Klise/layout/partials/_comments/index.ejs","hash":"b892d2c1723fd1b75610865c16c09a74fcd87f77","modified":1646404038931},{"_id":"themes/hexo-theme-Klise/source/css/partials/_base.scss","hash":"1b70ac12239290eb1b5faeaf9d2203d0009c4bb3","modified":1646404038945},{"_id":"themes/hexo-theme-Klise/layout/partials/_comments/waline.ejs","hash":"7bf4fee9ea8e4838059389c03790ac0494a04ca7","modified":1646404038932},{"_id":"themes/hexo-theme-Klise/source/css/partials/_dark.scss","hash":"7ef1084a0991b766ffa1bb64003b3e1e2318df67","modified":1646404038944},{"_id":"themes/hexo-theme-Klise/source/css/partials/_fonts.scss","hash":"68182d5d58b7de9e451b143bc6cff96a81178fca","modified":1646404038939},{"_id":"themes/hexo-theme-Klise/source/css/partials/_layout.scss","hash":"ef0910b0839a0599138b05390070e5c37686e24e","modified":1646404038941},{"_id":"themes/hexo-theme-Klise/source/css/partials/_post2.scss","hash":"8c66d282383f1ad6440f47a85ed736ab42ead1b2","modified":1646404038942},{"_id":"themes/hexo-theme-Klise/source/css/partials/_miscellaneous.scss","hash":"9a84f501b6c0ff74936ce4bb2359cc0348c6a3e2","modified":1646404038941},{"_id":"themes/hexo-theme-Klise/source/css/partials/_syntax.scss","hash":"332ed04b024d3791b94c5ebe590ab6af72501f50","modified":1646404038940},{"_id":"themes/hexo-theme-Klise/source/css/partials/_post.scss","hash":"382b5e56bceb9942d6fb44c5b8b53fb704b1615b","modified":1646404038943},{"_id":"themes/Klise/layout/partials/_comments/valine.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1646404038932},{"_id":"themes/Klise/.editorconfig","hash":"3036325288c2bdf484691e761250264acdf9916c","modified":1646404038949},{"_id":"themes/Klise/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1646404038921},{"_id":"themes/Klise/README.md","hash":"46632cc98832610810d5e91915d27f836d577711","modified":1646404038949},{"_id":"themes/Klise/_config.yml","hash":"50552bb27892947af23b1e75f9d72792ca3f622d","modified":1646404402531},{"_id":"themes/Klise/package.json","hash":"30c58009b3db3e2db5ec0d39532a70eba7217d62","modified":1646404038950},{"_id":"themes/Klise/layout/404.ejs","hash":"ac63d244d7d18daa9209c4d4b251454661431f63","modified":1646404038922},{"_id":"themes/Klise/layout/archive.ejs","hash":"359bfefb60b26646f9e5e23e51703614bccc0e94","modified":1646404038926},{"_id":"themes/Klise/layout/category.ejs","hash":"eff775fe7fd96bf30b3b5b785a047903c22cd702","modified":1646404038923},{"_id":"themes/Klise/layout/index.ejs","hash":"3bfca860c5912b30aa601ea00016304a3cb17a71","modified":1646404038925},{"_id":"themes/Klise/layout/layout.ejs","hash":"71b48d409a5c68252b41b0b55cfcadac092bfeb2","modified":1646404038927},{"_id":"themes/Klise/layout/page.ejs","hash":"d5802e5f6b13ae007f126303af2929ba2f8d1930","modified":1646404038928},{"_id":"themes/Klise/layout/post.ejs","hash":"5cddd27b8c761bf495a95330371377c28a108da3","modified":1646404038924},{"_id":"themes/Klise/layout/tag.ejs","hash":"66671b925d6a22d4d602ddd6712e491822087af8","modified":1646404038927},{"_id":"themes/Klise/layout/tags.ejs","hash":"88276835029efa09cb942a784475fae83a16930f","modified":1646404038928},{"_id":"themes/Klise/scripts/404.js","hash":"4a53453dd18258cc9800cf0e2bbb88a160f2e7c0","modified":1646404038951},{"_id":"themes/Klise/scripts/year.js","hash":"bae1adb64ddd4c3dd1e452fdeced9855d291216f","modified":1646404038952},{"_id":"themes/Klise/layout/partials/foot.ejs","hash":"1fec091068d1e0214cfc962030daf5bfd562ac1c","modified":1646404038934},{"_id":"themes/Klise/layout/partials/head.ejs","hash":"23b956e81a9dd323148866ea5533a44f760562b6","modified":1646404038935},{"_id":"themes/Klise/layout/partials/pagination.ejs","hash":"beaa965dfdc13ed1c8d6ed2d9c1a46f3a715e011","modified":1646404038930},{"_id":"themes/Klise/layout/partials/header.ejs","hash":"ff59fa9d53fd6247624b0af0572228874059adac","modified":1646404038933},{"_id":"themes/Klise/layout/partials/recent-posts.ejs","hash":"000cfedb84f6c46ce13f5851d7c485b83f44f291","modified":1646404038936},{"_id":"themes/Klise/source/img/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1646404038948},{"_id":"themes/Klise/source/css/main.scss","hash":"1fd8c5e60223cafae3655f0cf0db7949eafcb27c","modified":1646404038938},{"_id":"themes/Klise/source/js/main.js","hash":"ae187e7dfae77e0f1821de7cd84843b5ae8abf06","modified":1646404038946},{"_id":"themes/Klise/layout/partials/scripts.ejs","hash":"aa199709dbc6b6a5e0bbe00670b28f27bca65c48","modified":1646404038929},{"_id":"themes/Klise/layout/partials/_comments/index.ejs","hash":"b892d2c1723fd1b75610865c16c09a74fcd87f77","modified":1646404038931},{"_id":"themes/Klise/layout/partials/_comments/waline.ejs","hash":"7bf4fee9ea8e4838059389c03790ac0494a04ca7","modified":1646404038932},{"_id":"themes/Klise/source/css/partials/_base.scss","hash":"1b70ac12239290eb1b5faeaf9d2203d0009c4bb3","modified":1646404038945},{"_id":"themes/Klise/source/css/partials/_dark.scss","hash":"7ef1084a0991b766ffa1bb64003b3e1e2318df67","modified":1646404038944},{"_id":"themes/Klise/source/css/partials/_layout.scss","hash":"ef0910b0839a0599138b05390070e5c37686e24e","modified":1646404038941},{"_id":"themes/Klise/source/css/partials/_fonts.scss","hash":"68182d5d58b7de9e451b143bc6cff96a81178fca","modified":1646404038939},{"_id":"themes/Klise/source/css/partials/_miscellaneous.scss","hash":"9a84f501b6c0ff74936ce4bb2359cc0348c6a3e2","modified":1646404038941},{"_id":"themes/Klise/source/css/partials/_post2.scss","hash":"8c66d282383f1ad6440f47a85ed736ab42ead1b2","modified":1646404038942},{"_id":"themes/Klise/source/css/partials/_post.scss","hash":"382b5e56bceb9942d6fb44c5b8b53fb704b1615b","modified":1646404038943},{"_id":"themes/Klise/source/css/partials/_syntax.scss","hash":"332ed04b024d3791b94c5ebe590ab6af72501f50","modified":1646404038940},{"_id":"themes/Chic/ChangeLogs.md","hash":"0244985e7e4797e3d0a0e173dce4e341f6aa5dd0","modified":1646405195660},{"_id":"themes/Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1646405195660},{"_id":"themes/Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1646405195661},{"_id":"themes/Chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1646405195661},{"_id":"themes/Chic/_config.yml","hash":"c45eb27261f8904351efbcf4c09e9072f76154de","modified":1674556938523},{"_id":"themes/Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1646405195670},{"_id":"themes/Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1646405195662},{"_id":"themes/Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1646405195662},{"_id":"themes/Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1646405195662},{"_id":"themes/Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1646405195662},{"_id":"themes/Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1646405195662},{"_id":"themes/Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1646405195663},{"_id":"themes/Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1646405195663},{"_id":"themes/Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1646405195663},{"_id":"themes/Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1646405195663},{"_id":"themes/Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1646405195663},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1646405195664},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1646405195664},{"_id":"themes/Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1646405195668},{"_id":"themes/Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1646405195668},{"_id":"themes/Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1646405195669},{"_id":"themes/Chic/layout/layout.ejs","hash":"8565bbea5e904e75e8d1ff5186b3a53650a7fa70","modified":1646405195669},{"_id":"themes/Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1646405195669},{"_id":"themes/Chic/layout/tag.ejs","hash":"b62b49e1398952f711db41edc5563e8b891bdb60","modified":1646658775395},{"_id":"themes/Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1646405195669},{"_id":"themes/Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1646405195670},{"_id":"themes/Chic/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1646405195700},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1646405195664},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1646405195665},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1646405195665},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1646405195665},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"f49991a55cc08a1d90d8d6ae8d15a692163272e1","modified":1646405195665},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1646405195666},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1646405195666},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1646405195665},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1646405195666},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1646405195667},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1646405195668},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1646405195667},{"_id":"themes/Chic/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1646405195698},{"_id":"themes/Chic/source/css/layout.styl","hash":"4d9f83b5a3bac81e7857358744858fae708320de","modified":1646405195699},{"_id":"themes/Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1646405195699},{"_id":"themes/Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1646405195699},{"_id":"themes/Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1646405195699},{"_id":"themes/Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1646405195698},{"_id":"themes/Chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1646405195700},{"_id":"themes/Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1646405195700},{"_id":"themes/Chic/source/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1646405196033},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1646405196033},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"cab69a40ed6a2be1dd126d64ccf859bacedbb21b","modified":1646763227239},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1646405196034},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1646405195671},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1646405195671},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1646405195672},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1646405195672},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1646405195673},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1646405195673},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1646405195673},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1646405195674},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1646405195674},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1646405195675},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1646405195675},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1646405195674},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1646405195675},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1646405195676},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1646405195676},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1646405195676},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1646405195677},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1646405195678},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1646405195678},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1646405195679},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1646405195677},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1646405195679},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1646405195679},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1646405195680},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1646405195680},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1646405195681},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1646405195681},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1646405195683},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1646405195682},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1646405195683},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1646405195682},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1646405195683},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1646405195684},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1646405195685},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1646405195684},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1646405195685},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1646405195684},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1646405195685},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1646405195686},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1646405195686},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1646405195686},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1646405195687},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1646405195686},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1646405195687},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1646405195687},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1646405195687},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1646405195688},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1646405195688},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1646405195687},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1646405195688},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1646405195688},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1646405195689},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1646405195689},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1646405195689},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1646405195689},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1646405195691},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1646405195690},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1646405195691},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1646405195691},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1646405195692},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1646405195691},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1646405195692},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1646405195692},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1646405195692},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1646405195693},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1646405195693},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1646405195693},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1646405195693},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1646405195694},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1646405195694},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1646405195696},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1646405195696},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"057097e714284e72e97ab8a808a30df45555a342","modified":1646405195697},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1646405195696},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1646405195697},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1646405195697},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1646405195698},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1646405195700},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1646405195698},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1646405195701},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1646405195701},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1646405195701},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1646405195702},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1646405195702},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1646405195703},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1646405195702},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1646405195703},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1646405195703},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1646405195694},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1646405195695},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1646405195695},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1646405195695},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1646405195695},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1646405195695},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1646405195696},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1646405195996},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1646405195978},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1646405195753},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1646405195729},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1646405195917},{"_id":"source/tag/index.md","hash":"8a9b568965c0025d1622c1fbb6289997a08b620a","modified":1646658678982},{"_id":"source/category/index.md","hash":"04f59b45ca524f73df40b62afd0969ae7e051a26","modified":1646658742135},{"_id":"public/tag/index.html","hash":"bca8d24a8a043adf4607f13d0a4481b7d01b317d","modified":1674552593665},{"_id":"public/category/index.html","hash":"0bcdd83aaaca11e4c88cd53c09d53cf01f97e232","modified":1674552593665},{"_id":"public/2022/03/04/My-New-Post/index.html","hash":"414936edb32233838f1320c3e2362e5a553beb9d","modified":1646658689975},{"_id":"public/archives/index.html","hash":"0885151d1efa8efbb695eaea1bdfd9a7d5c6ce80","modified":1674552593665},{"_id":"public/archives/2022/index.html","hash":"84f0752bc13e523680f83a17a58dcf42eefd2f46","modified":1674552593665},{"_id":"public/tags/algorithms/index.html","hash":"fdf5f200b7dda347ad6d86b2a8bf3e14e1de8368","modified":1674552593665},{"_id":"public/index.html","hash":"721e1fedffed5b5e9c61243012de734b175df7e0","modified":1674552593665},{"_id":"public/archives/2022/03/index.html","hash":"d96aa38193b178bb427b3e233f9a7946000b5589","modified":1674552593665},{"_id":"public/2022/03/04/hello-world/index.html","hash":"4ba03df5e6283f90d150f9c9f118bfdcb7ff94e8","modified":1646658689975},{"_id":"public/js/main.js","hash":"ae187e7dfae77e0f1821de7cd84843b5ae8abf06","modified":1646658689975},{"_id":"public/img/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1646658689975},{"_id":"public/css/main.scss","hash":"1fd8c5e60223cafae3655f0cf0db7949eafcb27c","modified":1646658689975},{"_id":"themes/Chic/source/.DS_Store","hash":"bd843aba53b665ca423e9ddcc2a0930fa507fec1","modified":1646761906913},{"_id":"themes/Chic/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1646761903783},{"_id":"themes/Chic/source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1646823221704},{"_id":"source/_posts/two-smart-ideas-when-handling-elem-traversal.md","hash":"7f83b476a649cdb7dfabbf7874c806f8a1571211","modified":1647359607748},{"_id":"public/2022/03/04/two-smart-ideas-when-handling-elem-traversal/index.html","hash":"2b1319a2d1044c62e4eb547137ef9d762ab23984","modified":1674552593665},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1647359754731},{"_id":"public/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1647359754731},{"_id":"public/css/layout.css","hash":"9b81d7e5146871ae2d1010f3a10089bbb43e81e3","modified":1647359754731},{"_id":"public/css/base.css","hash":"2fce73a3c2df8f93edeb5e34a53b7d83e5191d85","modified":1647359754731},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1647359754731},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1647359754731},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1647359754731},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1647359754731},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1647359754731},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1647359754731},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1647359754731},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1647359754731},{"_id":"public/css/style.css","hash":"9681f8537e77efdd10f5bf08cc924fd0c9a9b58b","modified":1647359754731},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1647359754731},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1647359754731},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1647359754731},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1647359754731},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1647359754731},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1647359754731},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1647359754731},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1647359754731},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1647359754731},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1647359754731},{"_id":"public/image/avatar.jpeg","hash":"cab69a40ed6a2be1dd126d64ccf859bacedbb21b","modified":1647359754731},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1647359754731},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1647359754731},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1647359754731},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1647359754731},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1647359754731},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1647359754731},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1647359754731},{"_id":"source/_drafts/POST-request-method-1.md","hash":"d3cc15462f7291bffa9e6bfcf6436700207dccaf","modified":1674141716863},{"_id":"source/_drafts/POST-request-method-2.md","hash":"77be29f2a7cf3ddf898dfd6e668e07cc55d8a06f","modified":1674141716863},{"_id":"source/_drafts/oss-and-cdn.md","hash":"cf7638d870f3e4eb76d3261ab0bd88e9a2f2c98b","modified":1648219258150},{"_id":"source/.DS_Store","hash":"04b46a6b9c712b1cd7704aa7aaabbea8931ddc06","modified":1674536038087},{"_id":"source/_posts/two-movies-that-echos-in-my-life.md","hash":"8ba4fb7f4bb8109136aa232290eab715c028854f","modified":1674624525797},{"_id":"source/assets/.DS_Store","hash":"71eb9084ffa2b66d96101e6ca5972a8f8293c196","modified":1674536013182},{"_id":"source/assets/abouthim/.DS_Store","hash":"76efbb214191dc3654599821113ec2d478cdbb57","modified":1674479924188},{"_id":"source/assets/abouthim/avatars/avatar2.png","hash":"f462d170ea0475bd61676fd4f77d49f8205a67dc","modified":1674477440151},{"_id":"source/assets/abouthim/avatars/avatar1.ico","hash":"7cd51160e8e66a714f67e9cf40af6dfc3bb49e89","modified":1674477440149},{"_id":"source/assets/abouthim/avatars/avatar1.midium.png","hash":"8fa9820a950254b4ceb1b7ad757e7278b81a392d","modified":1674477637017},{"_id":"source/assets/abouthim/avatars/avatar1.png","hash":"2ea1a1afbb9cc8559581efffc0297233224d1fa4","modified":1674477440150},{"_id":"source/_posts/.DS_Store","hash":"67a47b8ed784087fd61844f24edbe655259f43eb","modified":1674608254887},{"_id":"source/assets/abouthim/avatars/avatar1.medium.png","hash":"8fa9820a950254b4ceb1b7ad757e7278b81a392d","modified":1674477637017},{"_id":"source/_posts/two-movies-that-echos-in-my-life/matrix-you-are-not-the-only-one.png","hash":"68dc8ce451ea81d9dd4f0a766c6d4a8795af99aa","modified":1674536218815},{"_id":"public/2023/01/22/two-movies-that-echos-in-my-life/index.html","hash":"ca93602ce5a0d29d667a1774397bf97e8a1ffda5","modified":1674635730434},{"_id":"public/archives/2023/index.html","hash":"33e79c32f3ab617db987f64374071da3524cb9dd","modified":1674552593665},{"_id":"public/archives/2023/01/index.html","hash":"300898ff3068d657c1d0c1c542dd27d2277fb428","modified":1674552593665},{"_id":"public/tags/rambling/index.html","hash":"6622b329ebb132b9cbf2f328be6f499cb4cdbc81","modified":1674552593665},{"_id":"source/.com/matrix-you-are-not-the-only-one.png","hash":"68dc8ce451ea81d9dd4f0a766c6d4a8795af99aa","modified":1674553397750},{"_id":"source/_posts/two-movies-that-echos-in-my-life/two-movies-that-echos-in-my-life--matrix-you-are-not-the-only-one.png","hash":"68dc8ce451ea81d9dd4f0a766c6d4a8795af99aa","modified":1674536218815},{"_id":"source/_posts/two-movies-that-echos-in-my-life/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1674608254883}],"Category":[],"Data":[],"Page":[{"title":"category","layout":"category","date":"2022-03-07T13:10:30.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ndate: 2022-03-07 21:10:30\n---\n","updated":"2022-03-08T17:22:59.000Z","path":"category/index.html","_id":"cl0iehqbi0000hxcm562r8lpn","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tag","layout":"tag","date":"2022-03-07T13:10:22.000Z","_content":"","source":"tag/index.md","raw":"---\ntitle: Tag\nlayout: tag\ndate: 2022-03-07 21:10:22\n---\n","updated":"2022-03-08T17:22:59.001Z","path":"tag/index.html","_id":"cl0iehqbi0001hxcm1jg30w4a","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Two smart ideas when handling elem-traversal","date":"2022-03-04T13:54:49.000Z","_content":"\nJust as same as the Death is inevitable to human, Traversing Elements of a Sequence is also inevitable to programmers. If you're a developer who's been working for a few years, I bet you've probably written the for-loop-clause thousands of times.\n\nWhen Given a list or an array, People Typically peek elements one by one in a simple and brutal-force way. Well, nothing's special. I didn't look into it too much either until I began to sharp my algorithm skills recently. Reading the section *LinkedList Questions* from the book *CTCI*, I learnt that there exists two pretty smart and elegant ideas when handling elem-traversal problems.\n\n\n## 1. Recursion and Backward-Traversal\n\nA function could call another function, which could keep on calling others, and so on. This forms a Call-Stack. Call-Stack is a type of Stack data structure that follows LIFO(Last In and First Out) rule. This means when function A is calling function B, there is a chance for A to do something (before and) after the context has left B's scope, but before leaving A's scope.\n\nNow think about this question: For a singly linked list(which means there's only a next-> pointer but no prev-> pointer for each node of the list), how do you traverse this list backward?\n\n{% codeblock %}\nhow do you traverse this list backward?\n\n1 -> 2 -> 3 -> 4 -> ...\n{% endcodeblock%}\n\nHere is where Function Recursion comes in.\n\nIf we design a function to peek an element of a list and send its next element to the same function within the call, we can implement a list traversal. The function we're using here is called recursive function.\n\nThe order between peeking an element and sending next element into recursion is the key. If we peek first and then send, it results in a forward traversal; If it's the other way around, we get a backward traversal.\n\n{% codeblock lang:js%}\nfunction traverse_backward(node) {\n\tif (node) {\n\t\ttraverse_backward(node.next)；\n\t\tpeek(node);\n\t}\n}\n{% endcodeblock%}\n\n\n## 2. Fast/Slow Runner (or Pointer)\n\nSometimes we care about a certain element which has something to do with the\nlast one but isn't the last itself. For example maybe we want the third element\nto the last one, or the mid-element of the list. What is a bit tricky here is\nthat the given list is singly and yet we don't know its length in advance.\n\nAllow me to clarify something first. The recursive function mentioned above\ncould of course solve these questions too. When reach the list end we get the\nlength of list and then can backward-traverse a certain number of times to meet\nthe condition. This would take 2 loops(forward and backward), though it still\ncosts a O(n) time. But if we were more cautious and want to do it better, we\nmay ask is it possible to just run for only 1 loop?\n\nYes. We can do it with Fast/Slow Runner algorithm. The idea is that we create\ntwo pointers, one following the other. The first pointer is deemed as Fast\nRunner which runs in the normal speed(once a time); the pointer following it is\ndeemed as Slow Runner, which is launched when some conditions are met, in some\nspeed depending on the specific cases. When Fast Runner reaches the last\nelement, the position where the Slow Runner is currently located is exactly the\nanswer we got for this question.\n\nFor example suppose we need to get the 3rd element to the end of list. We create\ntwo pointers and let the first one go as normal, and after 3 steps it did, we\nthen let the second pointer begin to go. Both go 1 step once time. In the end\nwhen the first is done, the second one's position is exactly the 3rd to the\nlast. In the whole process there is only one for-loop travelling. \n\nLet's look at another example. How do we retrieve the mid-element? The idea is\nsimple as well. When the Fast Runner goes 2 steps a time, the Slow Runner moves\n1 step forward. This will result in a fact that at anytime the Slow Runner is at\nthe half location of the Fast Runners'.\n\n\n\n","source":"_posts/two-smart-ideas-when-handling-elem-traversal.md","raw":"---\ntitle: Two smart ideas when handling elem-traversal\ndate: 2022-03-04 21:54:49\ntags: algorithms\n---\n\nJust as same as the Death is inevitable to human, Traversing Elements of a Sequence is also inevitable to programmers. If you're a developer who's been working for a few years, I bet you've probably written the for-loop-clause thousands of times.\n\nWhen Given a list or an array, People Typically peek elements one by one in a simple and brutal-force way. Well, nothing's special. I didn't look into it too much either until I began to sharp my algorithm skills recently. Reading the section *LinkedList Questions* from the book *CTCI*, I learnt that there exists two pretty smart and elegant ideas when handling elem-traversal problems.\n\n\n## 1. Recursion and Backward-Traversal\n\nA function could call another function, which could keep on calling others, and so on. This forms a Call-Stack. Call-Stack is a type of Stack data structure that follows LIFO(Last In and First Out) rule. This means when function A is calling function B, there is a chance for A to do something (before and) after the context has left B's scope, but before leaving A's scope.\n\nNow think about this question: For a singly linked list(which means there's only a next-> pointer but no prev-> pointer for each node of the list), how do you traverse this list backward?\n\n{% codeblock %}\nhow do you traverse this list backward?\n\n1 -> 2 -> 3 -> 4 -> ...\n{% endcodeblock%}\n\nHere is where Function Recursion comes in.\n\nIf we design a function to peek an element of a list and send its next element to the same function within the call, we can implement a list traversal. The function we're using here is called recursive function.\n\nThe order between peeking an element and sending next element into recursion is the key. If we peek first and then send, it results in a forward traversal; If it's the other way around, we get a backward traversal.\n\n{% codeblock lang:js%}\nfunction traverse_backward(node) {\n\tif (node) {\n\t\ttraverse_backward(node.next)；\n\t\tpeek(node);\n\t}\n}\n{% endcodeblock%}\n\n\n## 2. Fast/Slow Runner (or Pointer)\n\nSometimes we care about a certain element which has something to do with the\nlast one but isn't the last itself. For example maybe we want the third element\nto the last one, or the mid-element of the list. What is a bit tricky here is\nthat the given list is singly and yet we don't know its length in advance.\n\nAllow me to clarify something first. The recursive function mentioned above\ncould of course solve these questions too. When reach the list end we get the\nlength of list and then can backward-traverse a certain number of times to meet\nthe condition. This would take 2 loops(forward and backward), though it still\ncosts a O(n) time. But if we were more cautious and want to do it better, we\nmay ask is it possible to just run for only 1 loop?\n\nYes. We can do it with Fast/Slow Runner algorithm. The idea is that we create\ntwo pointers, one following the other. The first pointer is deemed as Fast\nRunner which runs in the normal speed(once a time); the pointer following it is\ndeemed as Slow Runner, which is launched when some conditions are met, in some\nspeed depending on the specific cases. When Fast Runner reaches the last\nelement, the position where the Slow Runner is currently located is exactly the\nanswer we got for this question.\n\nFor example suppose we need to get the 3rd element to the end of list. We create\ntwo pointers and let the first one go as normal, and after 3 steps it did, we\nthen let the second pointer begin to go. Both go 1 step once time. In the end\nwhen the first is done, the second one's position is exactly the 3rd to the\nlast. In the whole process there is only one for-loop travelling. \n\nLet's look at another example. How do we retrieve the mid-element? The idea is\nsimple as well. When the Fast Runner goes 2 steps a time, the Slow Runner moves\n1 step forward. This will result in a fact that at anytime the Slow Runner is at\nthe half location of the Fast Runners'.\n\n\n\n","slug":"two-smart-ideas-when-handling-elem-traversal","published":1,"updated":"2022-03-15T15:53:27.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0sbgq7d0000u1cm8fhm8ojv","content":"<p>Just as same as the Death is inevitable to human, Traversing Elements of a Sequence is also inevitable to programmers. If you’re a developer who’s been working for a few years, I bet you’ve probably written the for-loop-clause thousands of times.</p>\n<p>When Given a list or an array, People Typically peek elements one by one in a simple and brutal-force way. Well, nothing’s special. I didn’t look into it too much either until I began to sharp my algorithm skills recently. Reading the section <em>LinkedList Questions</em> from the book <em>CTCI</em>, I learnt that there exists two pretty smart and elegant ideas when handling elem-traversal problems.</p>\n<h2 id=\"1-Recursion-and-Backward-Traversal\"><a href=\"#1-Recursion-and-Backward-Traversal\" class=\"headerlink\" title=\"1. Recursion and Backward-Traversal\"></a>1. Recursion and Backward-Traversal</h2><p>A function could call another function, which could keep on calling others, and so on. This forms a Call-Stack. Call-Stack is a type of Stack data structure that follows LIFO(Last In and First Out) rule. This means when function A is calling function B, there is a chance for A to do something (before and) after the context has left B’s scope, but before leaving A’s scope.</p>\n<p>Now think about this question: For a singly linked list(which means there’s only a next-&gt; pointer but no prev-&gt; pointer for each node of the list), how do you traverse this list backward?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how do you traverse this list backward?</span><br><span class=\"line\"></span><br><span class=\"line\">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; ...</span><br></pre></td></tr></table></figure>\n\n<p>Here is where Function Recursion comes in.</p>\n<p>If we design a function to peek an element of a list and send its next element to the same function within the call, we can implement a list traversal. The function we’re using here is called recursive function.</p>\n<p>The order between peeking an element and sending next element into recursion is the key. If we peek first and then send, it results in a forward traversal; If it’s the other way around, we get a backward traversal.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">traverse_backward</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">traverse_backward</span>(node.<span class=\"property\">next</span>)；</span><br><span class=\"line\">\t\t<span class=\"title function_\">peek</span>(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-Fast-x2F-Slow-Runner-or-Pointer\"><a href=\"#2-Fast-x2F-Slow-Runner-or-Pointer\" class=\"headerlink\" title=\"2. Fast&#x2F;Slow Runner (or Pointer)\"></a>2. Fast&#x2F;Slow Runner (or Pointer)</h2><p>Sometimes we care about a certain element which has something to do with the<br>last one but isn’t the last itself. For example maybe we want the third element<br>to the last one, or the mid-element of the list. What is a bit tricky here is<br>that the given list is singly and yet we don’t know its length in advance.</p>\n<p>Allow me to clarify something first. The recursive function mentioned above<br>could of course solve these questions too. When reach the list end we get the<br>length of list and then can backward-traverse a certain number of times to meet<br>the condition. This would take 2 loops(forward and backward), though it still<br>costs a O(n) time. But if we were more cautious and want to do it better, we<br>may ask is it possible to just run for only 1 loop?</p>\n<p>Yes. We can do it with Fast&#x2F;Slow Runner algorithm. The idea is that we create<br>two pointers, one following the other. The first pointer is deemed as Fast<br>Runner which runs in the normal speed(once a time); the pointer following it is<br>deemed as Slow Runner, which is launched when some conditions are met, in some<br>speed depending on the specific cases. When Fast Runner reaches the last<br>element, the position where the Slow Runner is currently located is exactly the<br>answer we got for this question.</p>\n<p>For example suppose we need to get the 3rd element to the end of list. We create<br>two pointers and let the first one go as normal, and after 3 steps it did, we<br>then let the second pointer begin to go. Both go 1 step once time. In the end<br>when the first is done, the second one’s position is exactly the 3rd to the<br>last. In the whole process there is only one for-loop travelling. </p>\n<p>Let’s look at another example. How do we retrieve the mid-element? The idea is<br>simple as well. When the Fast Runner goes 2 steps a time, the Slow Runner moves<br>1 step forward. This will result in a fact that at anytime the Slow Runner is at<br>the half location of the Fast Runners’.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Just as same as the Death is inevitable to human, Traversing Elements of a Sequence is also inevitable to programmers. If you’re a developer who’s been working for a few years, I bet you’ve probably written the for-loop-clause thousands of times.</p>\n<p>When Given a list or an array, People Typically peek elements one by one in a simple and brutal-force way. Well, nothing’s special. I didn’t look into it too much either until I began to sharp my algorithm skills recently. Reading the section <em>LinkedList Questions</em> from the book <em>CTCI</em>, I learnt that there exists two pretty smart and elegant ideas when handling elem-traversal problems.</p>\n<h2 id=\"1-Recursion-and-Backward-Traversal\"><a href=\"#1-Recursion-and-Backward-Traversal\" class=\"headerlink\" title=\"1. Recursion and Backward-Traversal\"></a>1. Recursion and Backward-Traversal</h2><p>A function could call another function, which could keep on calling others, and so on. This forms a Call-Stack. Call-Stack is a type of Stack data structure that follows LIFO(Last In and First Out) rule. This means when function A is calling function B, there is a chance for A to do something (before and) after the context has left B’s scope, but before leaving A’s scope.</p>\n<p>Now think about this question: For a singly linked list(which means there’s only a next-&gt; pointer but no prev-&gt; pointer for each node of the list), how do you traverse this list backward?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">how do you traverse this list backward?</span><br><span class=\"line\"></span><br><span class=\"line\">1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; ...</span><br></pre></td></tr></table></figure>\n\n<p>Here is where Function Recursion comes in.</p>\n<p>If we design a function to peek an element of a list and send its next element to the same function within the call, we can implement a list traversal. The function we’re using here is called recursive function.</p>\n<p>The order between peeking an element and sending next element into recursion is the key. If we peek first and then send, it results in a forward traversal; If it’s the other way around, we get a backward traversal.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">traverse_backward</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">traverse_backward</span>(node.<span class=\"property\">next</span>)；</span><br><span class=\"line\">\t\t<span class=\"title function_\">peek</span>(node);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-Fast-x2F-Slow-Runner-or-Pointer\"><a href=\"#2-Fast-x2F-Slow-Runner-or-Pointer\" class=\"headerlink\" title=\"2. Fast&#x2F;Slow Runner (or Pointer)\"></a>2. Fast&#x2F;Slow Runner (or Pointer)</h2><p>Sometimes we care about a certain element which has something to do with the<br>last one but isn’t the last itself. For example maybe we want the third element<br>to the last one, or the mid-element of the list. What is a bit tricky here is<br>that the given list is singly and yet we don’t know its length in advance.</p>\n<p>Allow me to clarify something first. The recursive function mentioned above<br>could of course solve these questions too. When reach the list end we get the<br>length of list and then can backward-traverse a certain number of times to meet<br>the condition. This would take 2 loops(forward and backward), though it still<br>costs a O(n) time. But if we were more cautious and want to do it better, we<br>may ask is it possible to just run for only 1 loop?</p>\n<p>Yes. We can do it with Fast&#x2F;Slow Runner algorithm. The idea is that we create<br>two pointers, one following the other. The first pointer is deemed as Fast<br>Runner which runs in the normal speed(once a time); the pointer following it is<br>deemed as Slow Runner, which is launched when some conditions are met, in some<br>speed depending on the specific cases. When Fast Runner reaches the last<br>element, the position where the Slow Runner is currently located is exactly the<br>answer we got for this question.</p>\n<p>For example suppose we need to get the 3rd element to the end of list. We create<br>two pointers and let the first one go as normal, and after 3 steps it did, we<br>then let the second pointer begin to go. Both go 1 step once time. In the end<br>when the first is done, the second one’s position is exactly the 3rd to the<br>last. In the whole process there is only one for-loop travelling. </p>\n<p>Let’s look at another example. How do we retrieve the mid-element? The idea is<br>simple as well. When the Fast Runner goes 2 steps a time, the Slow Runner moves<br>1 step forward. This will result in a fact that at anytime the Slow Runner is at<br>the half location of the Fast Runners’.</p>\n"},{"title":"POST request method (1)","_content":"\nThere're some reasons I would try dodging POST requests whenever I stand a chance. \n\nNumber One and the most, it's more complex to grasp than GET from the first glance. Number Two, HTTP proxies are highly error-tolerant (or more obscure on the other view) so that if something appears to be wrong, you barely know which side it belongs to. And Number Three, some header definitions at different parts are overlapped, which gets things more tangled.\n\nBut one day I was being trapped in a problem for a couple of hours where uploading a file to a remote server somehow always failed, and it's the time that I realized I had nowhere to escape anymore. Maybe it's the time to confront this issue now. So I began to dig around how POST request really works.\n\nBut first, a little background about me. I'm not the guy who chose to be a web frontend specialist at the beginning of the career. I have general programming skills, senses and taste though. So however Javascript is my favorite, HTML, CSS or HTTP is not as that much, which I should be ashamed of myself about. Anyway, let's get started.\n\n------\n\nI guess developers won't feel strange with HTTP requests, but wait... think that again. Do they? The fact is people rarely handcraft these messages on their own, instead they construct them by a program such as a Browser in most cases. So it's true that we could see them very often, but only would really dig in it when something goes wrong. For example let's say, one day something was broken, and in my Chrome I saw all parameters have been packed into this GET request, so at least it's not a part of the problem, then let's look somewhere else.\n\nThat's how I deal with them in my daily work and Yes, I can barely remember anything about those request messages once they're done, well, except only one word or two with those parameters. To be frank, even for a very simple HTTP request you'll eventually get a bunch of key-values coming from the browser. it is no reason to follow up what each of them is for, isn't it?\n\n[img]\n\nSo when it comes to uploading a file via POST which I got stuck with, I begin to think how the binary data is really put in a request message, and then I remember there is an optional 'BODY' part we can rely on, which more usually appears in a response message when we want to GET something from the server. Well, on hand hand we get BODY from a GET request, and on the other hand we will put a BODY to a POST request. Does this look like something else?\n\nAnalogous to GET being used like a read() method in a program, POST is just like a write() method. The thing here is how do we handle the data to be written. This question can be split into two sub questions.\n\n------\n\nQuestion 1, how do we represent the data? In theory We should allow it to be a number, a string, an array or even an object. It literally can be anything. So what is a proper data structure which could just be as generic as possible? Numbers or Strings are primitive and they can not represent others. Arrays or Lists are better but lack of the ability to describe hierarchical levels. Objects(in javascript) or HashTables, are the best choice to include various types talked above.\nu\n\nJust like how we set some data in a HashTable, for each item we want to add, we will give it a key name and a value. For example a 'name' with 'Jayson', a 'age' with 37, a 'male' with true, a 'skills' with ['javascript', 'graphics', '...'], and so on. We pack them together and then submit it to the server via POST. \n\n```\n{\n  name: 'Jayson',\n  age: 37,\n  male: true,\n  skills: ['javascript', 'graphics', '...'],\n}\n```\n\nBut that's not the end of this story. The above content is just a theoretical representation. In practice there're two typical ways of encoding the data. One is called `'application/x-www-form-urlencoded'` and the other one is called `'multipart/form-data'`. What the hell is this? They're called [`Content-Type`]()(or [`MIME`]()) which is used to indicate what type of the content the user want to send to the sever. How to specify them? There's a field of the HTTP header named `'Content-Type'` for this purpose. What is the difference between the two? OKay let's continue on.\n\n### application/x-www-form-urlencoded\nIn this way a '=' character is placed between the key and the value, and each K-V pair is concatenated with each other using the '&' character. So the data mentioned above is actually encoded like this:\n\n```\nname=Jayson&age=37&male=true&skills=frontend%2Cjavascript%2Cgraphics%2C...\n```\n\nYou may notice there are some strange characters in this string, such like '%2C'. They're referred to as [Percent encoding](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) and just because of their existence its name is being called *'...-urlencoded'*. In essence that's a safer approach to transfer data via internet to avoid some non-alphanumeric characters to be treated as having some special meanings in some relay points. There's a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a '%' followed by its hexadecimal representation in the ASCII table, in the form of '%XX'.So it adds to the cost: it takes three times the cost in space for each encoded character.\n\nHow do we implement such an encoding? While we can do it on our own, there're also some tools. In browsers we can construct a builtin [`URLSearchParams`]() object to finish the job.\n\n\n### multipart/form-data\nTODO\n\n------\nQuestion 2, How do we transfer the data?\nAs we all know that POST is one method of HTTP proxy which lies on the topmost level of networking model, there're a few other proxies playing the role beneath HTTP. Only with them and through a long and complicated electronic way, the client and the server are able to communicate with each other. So in most cases as a non-system developer you need to count on some tools to send/receive HTTP requests. It may be a lib, a sdk or an app (like a Browser). The tool guarantees the message is shaped as a valid request that conforms to HTTP proxy, however filling whatever contents is up to you.\n\nIn browsers we can create an object of the '[XmlHTTPRequest]()' class, or use a global builtin method '[fetch]()' to send the HTTP request and receive the response. In some other scenarios there're other similar counterparts. Either of these tools provides a low-level functionality though, which means we should construct the message body ourselves and let them conform to the **Content Type** declared in the HTTP request header. \n\n**What if they aren't kept in step? Nothing happened. The tools will send whatever data we thrust into them**. For example, we can construct a **FormData** object as the POST message body but somehow provide with a **`application/x-www-form-urlencoded`**, which is obviously wrong since it breaks rules. But the message is allowed to be sent. However it's hard to say that the server will give a absolute rejection when they receive the message. It depends.\n\nThis leads to a twisted problem which is more usually seen in network programming. That's also one of reasons why I don't like to play with them. According to the proxy, you should follow the rules, but as long as you take charge of both sides(the client as well as the server), basically you can do whatever you want, because you can decide how to encode/decode the message on two ends. \n\nThings have even been evolved a bit further. Due to such an unpredictability, some ends will try to **'sniff'** the message which they got and do some auto-corrections if they can. So it's still possible that you send a wrong message which doesn't obey the HTTP rules with this respect but you find the server handles it well.\n\nFor some people (like me) who're not fully aware what they're doing, these kind of 'protections' are definitely a disaster. It gives them a hint, like to say, \"Great! You're doing things right.\" while they don't. People would either think they do things right or think servers always have some sort of advanced 'magic' which could guess out what they really want to express. But the fact is that not every single server will do that. Some servers just simply follow rules and take them down directly.\n\nSo our best practice is just to keep the rules as what it is, which really simplifies things. If we choose a **`application/x-www-form-urlencoded`** header, we should also provide the body with a value encoded by [`URLSearchParams`](); else if we pick up a **`multipart/form-data`** header then [`FormData`]() should be used to fill in the body. Don't mess them up. If a server rejects us, it means it doesn't follow HTTP rules, which is apparently their fault.\n\nHowever, manually keeping the body messages to be aligned with their declarations in the header is such a real pain. Some third-party libs like `Axios` can help to handle them. With such libs we only need to specify the k-v pairs data as the JSON format, and they will be encoded into correct relevant formats according to content-type we specified in the header.\n\n\n\n## With Binary Data\n\nNext comes the interesting part: a 'cv' with a file stored in my hard-drive is also a valid item. Its value no doubt is a binary data. Again as a reminder we do this by borrowing some kind of client API rather than manually hand write them somewhere.\n\n```\n{\n  cv: SOME BINARY DATA (we need a API to do so)\n}\n```\n\nWe'll discuss this BINARY part later, but now the main point is that POST is used to submit arbitrary key-value based data to the server, including the binary type which is often used to upload files. \n\n","source":"_drafts/POST-request-method-1.md","raw":"---\ntitle: POST request method (1)\ntags: web\n---\n\nThere're some reasons I would try dodging POST requests whenever I stand a chance. \n\nNumber One and the most, it's more complex to grasp than GET from the first glance. Number Two, HTTP proxies are highly error-tolerant (or more obscure on the other view) so that if something appears to be wrong, you barely know which side it belongs to. And Number Three, some header definitions at different parts are overlapped, which gets things more tangled.\n\nBut one day I was being trapped in a problem for a couple of hours where uploading a file to a remote server somehow always failed, and it's the time that I realized I had nowhere to escape anymore. Maybe it's the time to confront this issue now. So I began to dig around how POST request really works.\n\nBut first, a little background about me. I'm not the guy who chose to be a web frontend specialist at the beginning of the career. I have general programming skills, senses and taste though. So however Javascript is my favorite, HTML, CSS or HTTP is not as that much, which I should be ashamed of myself about. Anyway, let's get started.\n\n------\n\nI guess developers won't feel strange with HTTP requests, but wait... think that again. Do they? The fact is people rarely handcraft these messages on their own, instead they construct them by a program such as a Browser in most cases. So it's true that we could see them very often, but only would really dig in it when something goes wrong. For example let's say, one day something was broken, and in my Chrome I saw all parameters have been packed into this GET request, so at least it's not a part of the problem, then let's look somewhere else.\n\nThat's how I deal with them in my daily work and Yes, I can barely remember anything about those request messages once they're done, well, except only one word or two with those parameters. To be frank, even for a very simple HTTP request you'll eventually get a bunch of key-values coming from the browser. it is no reason to follow up what each of them is for, isn't it?\n\n[img]\n\nSo when it comes to uploading a file via POST which I got stuck with, I begin to think how the binary data is really put in a request message, and then I remember there is an optional 'BODY' part we can rely on, which more usually appears in a response message when we want to GET something from the server. Well, on hand hand we get BODY from a GET request, and on the other hand we will put a BODY to a POST request. Does this look like something else?\n\nAnalogous to GET being used like a read() method in a program, POST is just like a write() method. The thing here is how do we handle the data to be written. This question can be split into two sub questions.\n\n------\n\nQuestion 1, how do we represent the data? In theory We should allow it to be a number, a string, an array or even an object. It literally can be anything. So what is a proper data structure which could just be as generic as possible? Numbers or Strings are primitive and they can not represent others. Arrays or Lists are better but lack of the ability to describe hierarchical levels. Objects(in javascript) or HashTables, are the best choice to include various types talked above.\nu\n\nJust like how we set some data in a HashTable, for each item we want to add, we will give it a key name and a value. For example a 'name' with 'Jayson', a 'age' with 37, a 'male' with true, a 'skills' with ['javascript', 'graphics', '...'], and so on. We pack them together and then submit it to the server via POST. \n\n```\n{\n  name: 'Jayson',\n  age: 37,\n  male: true,\n  skills: ['javascript', 'graphics', '...'],\n}\n```\n\nBut that's not the end of this story. The above content is just a theoretical representation. In practice there're two typical ways of encoding the data. One is called `'application/x-www-form-urlencoded'` and the other one is called `'multipart/form-data'`. What the hell is this? They're called [`Content-Type`]()(or [`MIME`]()) which is used to indicate what type of the content the user want to send to the sever. How to specify them? There's a field of the HTTP header named `'Content-Type'` for this purpose. What is the difference between the two? OKay let's continue on.\n\n### application/x-www-form-urlencoded\nIn this way a '=' character is placed between the key and the value, and each K-V pair is concatenated with each other using the '&' character. So the data mentioned above is actually encoded like this:\n\n```\nname=Jayson&age=37&male=true&skills=frontend%2Cjavascript%2Cgraphics%2C...\n```\n\nYou may notice there are some strange characters in this string, such like '%2C'. They're referred to as [Percent encoding](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) and just because of their existence its name is being called *'...-urlencoded'*. In essence that's a safer approach to transfer data via internet to avoid some non-alphanumeric characters to be treated as having some special meanings in some relay points. There's a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a '%' followed by its hexadecimal representation in the ASCII table, in the form of '%XX'.So it adds to the cost: it takes three times the cost in space for each encoded character.\n\nHow do we implement such an encoding? While we can do it on our own, there're also some tools. In browsers we can construct a builtin [`URLSearchParams`]() object to finish the job.\n\n\n### multipart/form-data\nTODO\n\n------\nQuestion 2, How do we transfer the data?\nAs we all know that POST is one method of HTTP proxy which lies on the topmost level of networking model, there're a few other proxies playing the role beneath HTTP. Only with them and through a long and complicated electronic way, the client and the server are able to communicate with each other. So in most cases as a non-system developer you need to count on some tools to send/receive HTTP requests. It may be a lib, a sdk or an app (like a Browser). The tool guarantees the message is shaped as a valid request that conforms to HTTP proxy, however filling whatever contents is up to you.\n\nIn browsers we can create an object of the '[XmlHTTPRequest]()' class, or use a global builtin method '[fetch]()' to send the HTTP request and receive the response. In some other scenarios there're other similar counterparts. Either of these tools provides a low-level functionality though, which means we should construct the message body ourselves and let them conform to the **Content Type** declared in the HTTP request header. \n\n**What if they aren't kept in step? Nothing happened. The tools will send whatever data we thrust into them**. For example, we can construct a **FormData** object as the POST message body but somehow provide with a **`application/x-www-form-urlencoded`**, which is obviously wrong since it breaks rules. But the message is allowed to be sent. However it's hard to say that the server will give a absolute rejection when they receive the message. It depends.\n\nThis leads to a twisted problem which is more usually seen in network programming. That's also one of reasons why I don't like to play with them. According to the proxy, you should follow the rules, but as long as you take charge of both sides(the client as well as the server), basically you can do whatever you want, because you can decide how to encode/decode the message on two ends. \n\nThings have even been evolved a bit further. Due to such an unpredictability, some ends will try to **'sniff'** the message which they got and do some auto-corrections if they can. So it's still possible that you send a wrong message which doesn't obey the HTTP rules with this respect but you find the server handles it well.\n\nFor some people (like me) who're not fully aware what they're doing, these kind of 'protections' are definitely a disaster. It gives them a hint, like to say, \"Great! You're doing things right.\" while they don't. People would either think they do things right or think servers always have some sort of advanced 'magic' which could guess out what they really want to express. But the fact is that not every single server will do that. Some servers just simply follow rules and take them down directly.\n\nSo our best practice is just to keep the rules as what it is, which really simplifies things. If we choose a **`application/x-www-form-urlencoded`** header, we should also provide the body with a value encoded by [`URLSearchParams`](); else if we pick up a **`multipart/form-data`** header then [`FormData`]() should be used to fill in the body. Don't mess them up. If a server rejects us, it means it doesn't follow HTTP rules, which is apparently their fault.\n\nHowever, manually keeping the body messages to be aligned with their declarations in the header is such a real pain. Some third-party libs like `Axios` can help to handle them. With such libs we only need to specify the k-v pairs data as the JSON format, and they will be encoded into correct relevant formats according to content-type we specified in the header.\n\n\n\n## With Binary Data\n\nNext comes the interesting part: a 'cv' with a file stored in my hard-drive is also a valid item. Its value no doubt is a binary data. Again as a reminder we do this by borrowing some kind of client API rather than manually hand write them somewhere.\n\n```\n{\n  cv: SOME BINARY DATA (we need a API to do so)\n}\n```\n\nWe'll discuss this BINARY part later, but now the main point is that POST is used to submit arbitrary key-value based data to the server, including the binary type which is often used to upload files. \n\n","slug":"POST-request-method-1","published":0,"date":"2023-01-19T15:21:56.863Z","updated":"2023-01-19T15:21:56.863Z","_id":"cl3fzuvjx0000ttcmefwb56e7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There’re some reasons I would try dodging POST requests whenever I stand a chance. </p>\n<p>Number One and the most, it’s more complex to grasp than GET from the first glance. Number Two, HTTP proxies are highly error-tolerant (or more obscure on the other view) so that if something appears to be wrong, you barely know which side it belongs to. And Number Three, some header definitions at different parts are overlapped, which gets things more tangled.</p>\n<p>But one day I was being trapped in a problem for a couple of hours where uploading a file to a remote server somehow always failed, and it’s the time that I realized I had nowhere to escape anymore. Maybe it’s the time to confront this issue now. So I began to dig around how POST request really works.</p>\n<p>But first, a little background about me. I’m not the guy who chose to be a web frontend specialist at the beginning of the career. I have general programming skills, senses and taste though. So however Javascript is my favorite, HTML, CSS or HTTP is not as that much, which I should be ashamed of myself about. Anyway, let’s get started.</p>\n<hr>\n<p>I guess developers won’t feel strange with HTTP requests, but wait… think that again. Do they? The fact is people rarely handcraft these messages on their own, instead they construct them by a program such as a Browser in most cases. So it’s true that we could see them very often, but only would really dig in it when something goes wrong. For example let’s say, one day something was broken, and in my Chrome I saw all parameters have been packed into this GET request, so at least it’s not a part of the problem, then let’s look somewhere else.</p>\n<p>That’s how I deal with them in my daily work and Yes, I can barely remember anything about those request messages once they’re done, well, except only one word or two with those parameters. To be frank, even for a very simple HTTP request you’ll eventually get a bunch of key-values coming from the browser. it is no reason to follow up what each of them is for, isn’t it?</p>\n<p>[img]</p>\n<p>So when it comes to uploading a file via POST which I got stuck with, I begin to think how the binary data is really put in a request message, and then I remember there is an optional ‘BODY’ part we can rely on, which more usually appears in a response message when we want to GET something from the server. Well, on hand hand we get BODY from a GET request, and on the other hand we will put a BODY to a POST request. Does this look like something else?</p>\n<p>Analogous to GET being used like a read() method in a program, POST is just like a write() method. The thing here is how do we handle the data to be written. This question can be split into two sub questions.</p>\n<hr>\n<p>Question 1, how do we represent the data? In theory We should allow it to be a number, a string, an array or even an object. It literally can be anything. So what is a proper data structure which could just be as generic as possible? Numbers or Strings are primitive and they can not represent others. Arrays or Lists are better but lack of the ability to describe hierarchical levels. Objects(in javascript) or HashTables, are the best choice to include various types talked above.<br>u</p>\n<p>Just like how we set some data in a HashTable, for each item we want to add, we will give it a key name and a value. For example a ‘name’ with ‘Jayson’, a ‘age’ with 37, a ‘male’ with true, a ‘skills’ with [‘javascript’, ‘graphics’, ‘…’], and so on. We pack them together and then submit it to the server via POST. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;Jayson&#x27;,</span><br><span class=\"line\">  age: 37,</span><br><span class=\"line\">  male: true,</span><br><span class=\"line\">  skills: [&#x27;javascript&#x27;, &#x27;graphics&#x27;, &#x27;...&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But that’s not the end of this story. The above content is just a theoretical representation. In practice there’re two typical ways of encoding the data. One is called <code>&#39;application/x-www-form-urlencoded&#39;</code> and the other one is called <code>&#39;multipart/form-data&#39;</code>. What the hell is this? They’re called <a href><code>Content-Type</code></a>(or <a href><code>MIME</code></a>) which is used to indicate what type of the content the user want to send to the sever. How to specify them? There’s a field of the HTTP header named <code>&#39;Content-Type&#39;</code> for this purpose. What is the difference between the two? OKay let’s continue on.</p>\n<h3 id=\"application-x2F-x-www-form-urlencoded\"><a href=\"#application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>In this way a ‘&#x3D;’ character is placed between the key and the value, and each K-V pair is concatenated with each other using the ‘&amp;’ character. So the data mentioned above is actually encoded like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=Jayson&amp;age=37&amp;male=true&amp;skills=frontend%2Cjavascript%2Cgraphics%2C...</span><br></pre></td></tr></table></figure>\n\n<p>You may notice there are some strange characters in this string, such like ‘%2C’. They’re referred to as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\">Percent encoding</a> and just because of their existence its name is being called <em>‘…-urlencoded’</em>. In essence that’s a safer approach to transfer data via internet to avoid some non-alphanumeric characters to be treated as having some special meanings in some relay points. There’s a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a ‘%’ followed by its hexadecimal representation in the ASCII table, in the form of ‘%XX’.So it adds to the cost: it takes three times the cost in space for each encoded character.</p>\n<p>How do we implement such an encoding? While we can do it on our own, there’re also some tools. In browsers we can construct a builtin <a href><code>URLSearchParams</code></a> object to finish the job.</p>\n<h3 id=\"multipart-x2F-form-data\"><a href=\"#multipart-x2F-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><p>TODO</p>\n<hr>\n<p>Question 2, How do we transfer the data?<br>As we all know that POST is one method of HTTP proxy which lies on the topmost level of networking model, there’re a few other proxies playing the role beneath HTTP. Only with them and through a long and complicated electronic way, the client and the server are able to communicate with each other. So in most cases as a non-system developer you need to count on some tools to send&#x2F;receive HTTP requests. It may be a lib, a sdk or an app (like a Browser). The tool guarantees the message is shaped as a valid request that conforms to HTTP proxy, however filling whatever contents is up to you.</p>\n<p>In browsers we can create an object of the ‘<a href>XmlHTTPRequest</a>‘ class, or use a global builtin method ‘<a href>fetch</a>‘ to send the HTTP request and receive the response. In some other scenarios there’re other similar counterparts. Either of these tools provides a low-level functionality though, which means we should construct the message body ourselves and let them conform to the <strong>Content Type</strong> declared in the HTTP request header. </p>\n<p><strong>What if they aren’t kept in step? Nothing happened. The tools will send whatever data we thrust into them</strong>. For example, we can construct a <strong>FormData</strong> object as the POST message body but somehow provide with a <strong><code>application/x-www-form-urlencoded</code></strong>, which is obviously wrong since it breaks rules. But the message is allowed to be sent. However it’s hard to say that the server will give a absolute rejection when they receive the message. It depends.</p>\n<p>This leads to a twisted problem which is more usually seen in network programming. That’s also one of reasons why I don’t like to play with them. According to the proxy, you should follow the rules, but as long as you take charge of both sides(the client as well as the server), basically you can do whatever you want, because you can decide how to encode&#x2F;decode the message on two ends. </p>\n<p>Things have even been evolved a bit further. Due to such an unpredictability, some ends will try to <strong>‘sniff’</strong> the message which they got and do some auto-corrections if they can. So it’s still possible that you send a wrong message which doesn’t obey the HTTP rules with this respect but you find the server handles it well.</p>\n<p>For some people (like me) who’re not fully aware what they’re doing, these kind of ‘protections’ are definitely a disaster. It gives them a hint, like to say, “Great! You’re doing things right.” while they don’t. People would either think they do things right or think servers always have some sort of advanced ‘magic’ which could guess out what they really want to express. But the fact is that not every single server will do that. Some servers just simply follow rules and take them down directly.</p>\n<p>So our best practice is just to keep the rules as what it is, which really simplifies things. If we choose a <strong><code>application/x-www-form-urlencoded</code></strong> header, we should also provide the body with a value encoded by <a href><code>URLSearchParams</code></a>; else if we pick up a <strong><code>multipart/form-data</code></strong> header then <a href><code>FormData</code></a> should be used to fill in the body. Don’t mess them up. If a server rejects us, it means it doesn’t follow HTTP rules, which is apparently their fault.</p>\n<p>However, manually keeping the body messages to be aligned with their declarations in the header is such a real pain. Some third-party libs like <code>Axios</code> can help to handle them. With such libs we only need to specify the k-v pairs data as the JSON format, and they will be encoded into correct relevant formats according to content-type we specified in the header.</p>\n<h2 id=\"With-Binary-Data\"><a href=\"#With-Binary-Data\" class=\"headerlink\" title=\"With Binary Data\"></a>With Binary Data</h2><p>Next comes the interesting part: a ‘cv’ with a file stored in my hard-drive is also a valid item. Its value no doubt is a binary data. Again as a reminder we do this by borrowing some kind of client API rather than manually hand write them somewhere.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  cv: SOME BINARY DATA (we need a API to do so)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll discuss this BINARY part later, but now the main point is that POST is used to submit arbitrary key-value based data to the server, including the binary type which is often used to upload files. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>There’re some reasons I would try dodging POST requests whenever I stand a chance. </p>\n<p>Number One and the most, it’s more complex to grasp than GET from the first glance. Number Two, HTTP proxies are highly error-tolerant (or more obscure on the other view) so that if something appears to be wrong, you barely know which side it belongs to. And Number Three, some header definitions at different parts are overlapped, which gets things more tangled.</p>\n<p>But one day I was being trapped in a problem for a couple of hours where uploading a file to a remote server somehow always failed, and it’s the time that I realized I had nowhere to escape anymore. Maybe it’s the time to confront this issue now. So I began to dig around how POST request really works.</p>\n<p>But first, a little background about me. I’m not the guy who chose to be a web frontend specialist at the beginning of the career. I have general programming skills, senses and taste though. So however Javascript is my favorite, HTML, CSS or HTTP is not as that much, which I should be ashamed of myself about. Anyway, let’s get started.</p>\n<hr>\n<p>I guess developers won’t feel strange with HTTP requests, but wait… think that again. Do they? The fact is people rarely handcraft these messages on their own, instead they construct them by a program such as a Browser in most cases. So it’s true that we could see them very often, but only would really dig in it when something goes wrong. For example let’s say, one day something was broken, and in my Chrome I saw all parameters have been packed into this GET request, so at least it’s not a part of the problem, then let’s look somewhere else.</p>\n<p>That’s how I deal with them in my daily work and Yes, I can barely remember anything about those request messages once they’re done, well, except only one word or two with those parameters. To be frank, even for a very simple HTTP request you’ll eventually get a bunch of key-values coming from the browser. it is no reason to follow up what each of them is for, isn’t it?</p>\n<p>[img]</p>\n<p>So when it comes to uploading a file via POST which I got stuck with, I begin to think how the binary data is really put in a request message, and then I remember there is an optional ‘BODY’ part we can rely on, which more usually appears in a response message when we want to GET something from the server. Well, on hand hand we get BODY from a GET request, and on the other hand we will put a BODY to a POST request. Does this look like something else?</p>\n<p>Analogous to GET being used like a read() method in a program, POST is just like a write() method. The thing here is how do we handle the data to be written. This question can be split into two sub questions.</p>\n<hr>\n<p>Question 1, how do we represent the data? In theory We should allow it to be a number, a string, an array or even an object. It literally can be anything. So what is a proper data structure which could just be as generic as possible? Numbers or Strings are primitive and they can not represent others. Arrays or Lists are better but lack of the ability to describe hierarchical levels. Objects(in javascript) or HashTables, are the best choice to include various types talked above.<br>u</p>\n<p>Just like how we set some data in a HashTable, for each item we want to add, we will give it a key name and a value. For example a ‘name’ with ‘Jayson’, a ‘age’ with 37, a ‘male’ with true, a ‘skills’ with [‘javascript’, ‘graphics’, ‘…’], and so on. We pack them together and then submit it to the server via POST. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;Jayson&#x27;,</span><br><span class=\"line\">  age: 37,</span><br><span class=\"line\">  male: true,</span><br><span class=\"line\">  skills: [&#x27;javascript&#x27;, &#x27;graphics&#x27;, &#x27;...&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But that’s not the end of this story. The above content is just a theoretical representation. In practice there’re two typical ways of encoding the data. One is called <code>&#39;application/x-www-form-urlencoded&#39;</code> and the other one is called <code>&#39;multipart/form-data&#39;</code>. What the hell is this? They’re called <a href><code>Content-Type</code></a>(or <a href><code>MIME</code></a>) which is used to indicate what type of the content the user want to send to the sever. How to specify them? There’s a field of the HTTP header named <code>&#39;Content-Type&#39;</code> for this purpose. What is the difference between the two? OKay let’s continue on.</p>\n<h3 id=\"application-x2F-x-www-form-urlencoded\"><a href=\"#application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>In this way a ‘&#x3D;’ character is placed between the key and the value, and each K-V pair is concatenated with each other using the ‘&amp;’ character. So the data mentioned above is actually encoded like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=Jayson&amp;age=37&amp;male=true&amp;skills=frontend%2Cjavascript%2Cgraphics%2C...</span><br></pre></td></tr></table></figure>\n\n<p>You may notice there are some strange characters in this string, such like ‘%2C’. They’re referred to as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\">Percent encoding</a> and just because of their existence its name is being called <em>‘…-urlencoded’</em>. In essence that’s a safer approach to transfer data via internet to avoid some non-alphanumeric characters to be treated as having some special meanings in some relay points. There’s a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a ‘%’ followed by its hexadecimal representation in the ASCII table, in the form of ‘%XX’.So it adds to the cost: it takes three times the cost in space for each encoded character.</p>\n<p>How do we implement such an encoding? While we can do it on our own, there’re also some tools. In browsers we can construct a builtin <a href><code>URLSearchParams</code></a> object to finish the job.</p>\n<h3 id=\"multipart-x2F-form-data\"><a href=\"#multipart-x2F-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><p>TODO</p>\n<hr>\n<p>Question 2, How do we transfer the data?<br>As we all know that POST is one method of HTTP proxy which lies on the topmost level of networking model, there’re a few other proxies playing the role beneath HTTP. Only with them and through a long and complicated electronic way, the client and the server are able to communicate with each other. So in most cases as a non-system developer you need to count on some tools to send&#x2F;receive HTTP requests. It may be a lib, a sdk or an app (like a Browser). The tool guarantees the message is shaped as a valid request that conforms to HTTP proxy, however filling whatever contents is up to you.</p>\n<p>In browsers we can create an object of the ‘<a href>XmlHTTPRequest</a>‘ class, or use a global builtin method ‘<a href>fetch</a>‘ to send the HTTP request and receive the response. In some other scenarios there’re other similar counterparts. Either of these tools provides a low-level functionality though, which means we should construct the message body ourselves and let them conform to the <strong>Content Type</strong> declared in the HTTP request header. </p>\n<p><strong>What if they aren’t kept in step? Nothing happened. The tools will send whatever data we thrust into them</strong>. For example, we can construct a <strong>FormData</strong> object as the POST message body but somehow provide with a <strong><code>application/x-www-form-urlencoded</code></strong>, which is obviously wrong since it breaks rules. But the message is allowed to be sent. However it’s hard to say that the server will give a absolute rejection when they receive the message. It depends.</p>\n<p>This leads to a twisted problem which is more usually seen in network programming. That’s also one of reasons why I don’t like to play with them. According to the proxy, you should follow the rules, but as long as you take charge of both sides(the client as well as the server), basically you can do whatever you want, because you can decide how to encode&#x2F;decode the message on two ends. </p>\n<p>Things have even been evolved a bit further. Due to such an unpredictability, some ends will try to <strong>‘sniff’</strong> the message which they got and do some auto-corrections if they can. So it’s still possible that you send a wrong message which doesn’t obey the HTTP rules with this respect but you find the server handles it well.</p>\n<p>For some people (like me) who’re not fully aware what they’re doing, these kind of ‘protections’ are definitely a disaster. It gives them a hint, like to say, “Great! You’re doing things right.” while they don’t. People would either think they do things right or think servers always have some sort of advanced ‘magic’ which could guess out what they really want to express. But the fact is that not every single server will do that. Some servers just simply follow rules and take them down directly.</p>\n<p>So our best practice is just to keep the rules as what it is, which really simplifies things. If we choose a <strong><code>application/x-www-form-urlencoded</code></strong> header, we should also provide the body with a value encoded by <a href><code>URLSearchParams</code></a>; else if we pick up a <strong><code>multipart/form-data</code></strong> header then <a href><code>FormData</code></a> should be used to fill in the body. Don’t mess them up. If a server rejects us, it means it doesn’t follow HTTP rules, which is apparently their fault.</p>\n<p>However, manually keeping the body messages to be aligned with their declarations in the header is such a real pain. Some third-party libs like <code>Axios</code> can help to handle them. With such libs we only need to specify the k-v pairs data as the JSON format, and they will be encoded into correct relevant formats according to content-type we specified in the header.</p>\n<h2 id=\"With-Binary-Data\"><a href=\"#With-Binary-Data\" class=\"headerlink\" title=\"With Binary Data\"></a>With Binary Data</h2><p>Next comes the interesting part: a ‘cv’ with a file stored in my hard-drive is also a valid item. Its value no doubt is a binary data. Again as a reminder we do this by borrowing some kind of client API rather than manually hand write them somewhere.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  cv: SOME BINARY DATA (we need a API to do so)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll discuss this BINARY part later, but now the main point is that POST is used to submit arbitrary key-value based data to the server, including the binary type which is often used to upload files. </p>\n"},{"title":"POST request method (2)","_content":"\n## Two ways of encoding data in POST\nIn the previous article I talked about that POST is used to commit key-value based data to a server. Also we can call this K-V paired data as 'payload'. Despite how they're done behind the scene, there're two ways in representing(or encoding) the data. Since as a user you're the one who make the choice, it's also your job to learn them well. These two ways are: `application/x-www-form-urlencoded` and `multipart/form-data`.\n\nYou may feel a little dizzy as the same way as I have experienced before. 'What the hell is these, some mysterious cipher?'. It's fine, let's just keep them in mind for now and I'll give an explanation later.\n\n### application/x-www-form-urlencoded\nIn this way a '=' character is placed between the key and the value, and each K-V pair is concatenated with each other using the '&' character. So the payload mentioned in the last article\n```\n{\n  name: 'Jayson',\n  age: 37,\n  male: true,\n  skills: ['frontend', 'javascript', 'graphics', '...'],\n}\n```\ncould just be represented as \n```\nname=Jayson&age=37&male=true&skills=frontend%2Cjavascript%2Cgraphics%2C...\n```\n\nYou may notice there are some strange characters in this string, such like '%2C'. They're referred to as [Percent encoding](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) and it's just because of their existence the name of this way is being called *'...-urlencoded'*. In essence that's a safer approach to transfer data via internet to avoid some special non-alphanumeric characters to be treated as having some special meanings in some intermediate steps. There's a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a '%' followed by its hexadecimal representation in the ASCII table, in the form of '%XX'.\n\nWhile pros of this approach are prominent, it also brings the cons: it takes three times the cost in space for each encoded character. For binary data, which as one kind of payload we mentioned in the last article, are full of non-alphanumeric chars by its nature. Triple cost means a lot and probably unacceptable.\n\nOne note about binary data here is that, rather than you would probably think that `application/x-www-form-urlencoded` is not allowed to transfer binary data, it technically can. It's just such a waste though.\n\nShould we encode them ourselves? The answer is no, unless you're the author of a lib with this respect. Some client API you choose does this for you automatically as long as you specify this way in the header. Examples of these client API are Axios, XMLHttpRequest or Fetch.\n\n### multipart/form-data\n\n\n## MIME or Content-Type\n\n\n## Content-Type in the request header is to specify which type of data  you're using\n\n## Mind that multipart/form-data is used to upload files. Why?\n\n## Mind that there is also a sub header config under a file-field declaration and a same name 'Content-Type'\n\n## When running in different environments(on browser or on the server), there're different ways to specify what is the Content-Type of a specified file in POST form-data\n","source":"_drafts/POST-request-method-2.md","raw":"---\ntitle: POST request method (2)\ntags:\n---\n\n## Two ways of encoding data in POST\nIn the previous article I talked about that POST is used to commit key-value based data to a server. Also we can call this K-V paired data as 'payload'. Despite how they're done behind the scene, there're two ways in representing(or encoding) the data. Since as a user you're the one who make the choice, it's also your job to learn them well. These two ways are: `application/x-www-form-urlencoded` and `multipart/form-data`.\n\nYou may feel a little dizzy as the same way as I have experienced before. 'What the hell is these, some mysterious cipher?'. It's fine, let's just keep them in mind for now and I'll give an explanation later.\n\n### application/x-www-form-urlencoded\nIn this way a '=' character is placed between the key and the value, and each K-V pair is concatenated with each other using the '&' character. So the payload mentioned in the last article\n```\n{\n  name: 'Jayson',\n  age: 37,\n  male: true,\n  skills: ['frontend', 'javascript', 'graphics', '...'],\n}\n```\ncould just be represented as \n```\nname=Jayson&age=37&male=true&skills=frontend%2Cjavascript%2Cgraphics%2C...\n```\n\nYou may notice there are some strange characters in this string, such like '%2C'. They're referred to as [Percent encoding](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding) and it's just because of their existence the name of this way is being called *'...-urlencoded'*. In essence that's a safer approach to transfer data via internet to avoid some special non-alphanumeric characters to be treated as having some special meanings in some intermediate steps. There's a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a '%' followed by its hexadecimal representation in the ASCII table, in the form of '%XX'.\n\nWhile pros of this approach are prominent, it also brings the cons: it takes three times the cost in space for each encoded character. For binary data, which as one kind of payload we mentioned in the last article, are full of non-alphanumeric chars by its nature. Triple cost means a lot and probably unacceptable.\n\nOne note about binary data here is that, rather than you would probably think that `application/x-www-form-urlencoded` is not allowed to transfer binary data, it technically can. It's just such a waste though.\n\nShould we encode them ourselves? The answer is no, unless you're the author of a lib with this respect. Some client API you choose does this for you automatically as long as you specify this way in the header. Examples of these client API are Axios, XMLHttpRequest or Fetch.\n\n### multipart/form-data\n\n\n## MIME or Content-Type\n\n\n## Content-Type in the request header is to specify which type of data  you're using\n\n## Mind that multipart/form-data is used to upload files. Why?\n\n## Mind that there is also a sub header config under a file-field declaration and a same name 'Content-Type'\n\n## When running in different environments(on browser or on the server), there're different ways to specify what is the Content-Type of a specified file in POST form-data\n","slug":"POST-request-method-2","published":0,"date":"2023-01-19T15:21:56.863Z","updated":"2023-01-19T15:21:56.863Z","_id":"cl3fzuvk20001ttcmb4oa3421","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Two-ways-of-encoding-data-in-POST\"><a href=\"#Two-ways-of-encoding-data-in-POST\" class=\"headerlink\" title=\"Two ways of encoding data in POST\"></a>Two ways of encoding data in POST</h2><p>In the previous article I talked about that POST is used to commit key-value based data to a server. Also we can call this K-V paired data as ‘payload’. Despite how they’re done behind the scene, there’re two ways in representing(or encoding) the data. Since as a user you’re the one who make the choice, it’s also your job to learn them well. These two ways are: <code>application/x-www-form-urlencoded</code> and <code>multipart/form-data</code>.</p>\n<p>You may feel a little dizzy as the same way as I have experienced before. ‘What the hell is these, some mysterious cipher?’. It’s fine, let’s just keep them in mind for now and I’ll give an explanation later.</p>\n<h3 id=\"application-x2F-x-www-form-urlencoded\"><a href=\"#application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>In this way a ‘&#x3D;’ character is placed between the key and the value, and each K-V pair is concatenated with each other using the ‘&amp;’ character. So the payload mentioned in the last article</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;Jayson&#x27;,</span><br><span class=\"line\">  age: 37,</span><br><span class=\"line\">  male: true,</span><br><span class=\"line\">  skills: [&#x27;frontend&#x27;, &#x27;javascript&#x27;, &#x27;graphics&#x27;, &#x27;...&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>could just be represented as </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=Jayson&amp;age=37&amp;male=true&amp;skills=frontend%2Cjavascript%2Cgraphics%2C...</span><br></pre></td></tr></table></figure>\n\n<p>You may notice there are some strange characters in this string, such like ‘%2C’. They’re referred to as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\">Percent encoding</a> and it’s just because of their existence the name of this way is being called <em>‘…-urlencoded’</em>. In essence that’s a safer approach to transfer data via internet to avoid some special non-alphanumeric characters to be treated as having some special meanings in some intermediate steps. There’s a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a ‘%’ followed by its hexadecimal representation in the ASCII table, in the form of ‘%XX’.</p>\n<p>While pros of this approach are prominent, it also brings the cons: it takes three times the cost in space for each encoded character. For binary data, which as one kind of payload we mentioned in the last article, are full of non-alphanumeric chars by its nature. Triple cost means a lot and probably unacceptable.</p>\n<p>One note about binary data here is that, rather than you would probably think that <code>application/x-www-form-urlencoded</code> is not allowed to transfer binary data, it technically can. It’s just such a waste though.</p>\n<p>Should we encode them ourselves? The answer is no, unless you’re the author of a lib with this respect. Some client API you choose does this for you automatically as long as you specify this way in the header. Examples of these client API are Axios, XMLHttpRequest or Fetch.</p>\n<h3 id=\"multipart-x2F-form-data\"><a href=\"#multipart-x2F-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><h2 id=\"MIME-or-Content-Type\"><a href=\"#MIME-or-Content-Type\" class=\"headerlink\" title=\"MIME or Content-Type\"></a>MIME or Content-Type</h2><h2 id=\"Content-Type-in-the-request-header-is-to-specify-which-type-of-data-you’re-using\"><a href=\"#Content-Type-in-the-request-header-is-to-specify-which-type-of-data-you’re-using\" class=\"headerlink\" title=\"Content-Type in the request header is to specify which type of data  you’re using\"></a>Content-Type in the request header is to specify which type of data  you’re using</h2><h2 id=\"Mind-that-multipart-x2F-form-data-is-used-to-upload-files-Why\"><a href=\"#Mind-that-multipart-x2F-form-data-is-used-to-upload-files-Why\" class=\"headerlink\" title=\"Mind that multipart&#x2F;form-data is used to upload files. Why?\"></a>Mind that multipart&#x2F;form-data is used to upload files. Why?</h2><h2 id=\"Mind-that-there-is-also-a-sub-header-config-under-a-file-field-declaration-and-a-same-name-‘Content-Type’\"><a href=\"#Mind-that-there-is-also-a-sub-header-config-under-a-file-field-declaration-and-a-same-name-‘Content-Type’\" class=\"headerlink\" title=\"Mind that there is also a sub header config under a file-field declaration and a same name ‘Content-Type’\"></a>Mind that there is also a sub header config under a file-field declaration and a same name ‘Content-Type’</h2><h2 id=\"When-running-in-different-environments-on-browser-or-on-the-server-there’re-different-ways-to-specify-what-is-the-Content-Type-of-a-specified-file-in-POST-form-data\"><a href=\"#When-running-in-different-environments-on-browser-or-on-the-server-there’re-different-ways-to-specify-what-is-the-Content-Type-of-a-specified-file-in-POST-form-data\" class=\"headerlink\" title=\"When running in different environments(on browser or on the server), there’re different ways to specify what is the Content-Type of a specified file in POST form-data\"></a>When running in different environments(on browser or on the server), there’re different ways to specify what is the Content-Type of a specified file in POST form-data</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Two-ways-of-encoding-data-in-POST\"><a href=\"#Two-ways-of-encoding-data-in-POST\" class=\"headerlink\" title=\"Two ways of encoding data in POST\"></a>Two ways of encoding data in POST</h2><p>In the previous article I talked about that POST is used to commit key-value based data to a server. Also we can call this K-V paired data as ‘payload’. Despite how they’re done behind the scene, there’re two ways in representing(or encoding) the data. Since as a user you’re the one who make the choice, it’s also your job to learn them well. These two ways are: <code>application/x-www-form-urlencoded</code> and <code>multipart/form-data</code>.</p>\n<p>You may feel a little dizzy as the same way as I have experienced before. ‘What the hell is these, some mysterious cipher?’. It’s fine, let’s just keep them in mind for now and I’ll give an explanation later.</p>\n<h3 id=\"application-x2F-x-www-form-urlencoded\"><a href=\"#application-x2F-x-www-form-urlencoded\" class=\"headerlink\" title=\"application&#x2F;x-www-form-urlencoded\"></a>application&#x2F;x-www-form-urlencoded</h3><p>In this way a ‘&#x3D;’ character is placed between the key and the value, and each K-V pair is concatenated with each other using the ‘&amp;’ character. So the payload mentioned in the last article</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  name: &#x27;Jayson&#x27;,</span><br><span class=\"line\">  age: 37,</span><br><span class=\"line\">  male: true,</span><br><span class=\"line\">  skills: [&#x27;frontend&#x27;, &#x27;javascript&#x27;, &#x27;graphics&#x27;, &#x27;...&#x27;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>could just be represented as </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=Jayson&amp;age=37&amp;male=true&amp;skills=frontend%2Cjavascript%2Cgraphics%2C...</span><br></pre></td></tr></table></figure>\n\n<p>You may notice there are some strange characters in this string, such like ‘%2C’. They’re referred to as <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding\">Percent encoding</a> and it’s just because of their existence the name of this way is being called <em>‘…-urlencoded’</em>. In essence that’s a safer approach to transfer data via internet to avoid some special non-alphanumeric characters to be treated as having some special meanings in some intermediate steps. There’s a list in the above link where you can find all special characters and what each of them is encoded into. Typically one such a char is turned into a ‘%’ followed by its hexadecimal representation in the ASCII table, in the form of ‘%XX’.</p>\n<p>While pros of this approach are prominent, it also brings the cons: it takes three times the cost in space for each encoded character. For binary data, which as one kind of payload we mentioned in the last article, are full of non-alphanumeric chars by its nature. Triple cost means a lot and probably unacceptable.</p>\n<p>One note about binary data here is that, rather than you would probably think that <code>application/x-www-form-urlencoded</code> is not allowed to transfer binary data, it technically can. It’s just such a waste though.</p>\n<p>Should we encode them ourselves? The answer is no, unless you’re the author of a lib with this respect. Some client API you choose does this for you automatically as long as you specify this way in the header. Examples of these client API are Axios, XMLHttpRequest or Fetch.</p>\n<h3 id=\"multipart-x2F-form-data\"><a href=\"#multipart-x2F-form-data\" class=\"headerlink\" title=\"multipart&#x2F;form-data\"></a>multipart&#x2F;form-data</h3><h2 id=\"MIME-or-Content-Type\"><a href=\"#MIME-or-Content-Type\" class=\"headerlink\" title=\"MIME or Content-Type\"></a>MIME or Content-Type</h2><h2 id=\"Content-Type-in-the-request-header-is-to-specify-which-type-of-data-you’re-using\"><a href=\"#Content-Type-in-the-request-header-is-to-specify-which-type-of-data-you’re-using\" class=\"headerlink\" title=\"Content-Type in the request header is to specify which type of data  you’re using\"></a>Content-Type in the request header is to specify which type of data  you’re using</h2><h2 id=\"Mind-that-multipart-x2F-form-data-is-used-to-upload-files-Why\"><a href=\"#Mind-that-multipart-x2F-form-data-is-used-to-upload-files-Why\" class=\"headerlink\" title=\"Mind that multipart&#x2F;form-data is used to upload files. Why?\"></a>Mind that multipart&#x2F;form-data is used to upload files. Why?</h2><h2 id=\"Mind-that-there-is-also-a-sub-header-config-under-a-file-field-declaration-and-a-same-name-‘Content-Type’\"><a href=\"#Mind-that-there-is-also-a-sub-header-config-under-a-file-field-declaration-and-a-same-name-‘Content-Type’\" class=\"headerlink\" title=\"Mind that there is also a sub header config under a file-field declaration and a same name ‘Content-Type’\"></a>Mind that there is also a sub header config under a file-field declaration and a same name ‘Content-Type’</h2><h2 id=\"When-running-in-different-environments-on-browser-or-on-the-server-there’re-different-ways-to-specify-what-is-the-Content-Type-of-a-specified-file-in-POST-form-data\"><a href=\"#When-running-in-different-environments-on-browser-or-on-the-server-there’re-different-ways-to-specify-what-is-the-Content-Type-of-a-specified-file-in-POST-form-data\" class=\"headerlink\" title=\"When running in different environments(on browser or on the server), there’re different ways to specify what is the Content-Type of a specified file in POST form-data\"></a>When running in different environments(on browser or on the server), there’re different ways to specify what is the Content-Type of a specified file in POST form-data</h2>"},{"title":"oss and cdn","_content":"","source":"_drafts/oss-and-cdn.md","raw":"---\ntitle: oss and cdn\ntags:\n---\n","slug":"oss-and-cdn","published":0,"date":"2022-03-25T14:40:58.150Z","updated":"2022-03-25T14:40:58.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3fzuvkb0004ttcmgifmfqxm","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"blog","title":"two movies that echos in my life","date":"2023-01-22T10:02:42.000Z","_content":"\nOut of all movies I've ever watched, there're two that didn't catch my attention at first, but always came to my mind in my later life as I grew older. They're 'The Matrix Reloaded' and '1408'.\n\n'The Matrix Reloaded' is the 2nd sequel in The Matrix series. It tells a story of the supposed saviour discovering the truth of saving the world behind the curtain. Neo, the hero who had been widely believed to be the ultimate man to help people out of the control of machines, was told by the Architect who built The Matrix that he was not the only 'One' in history. Every once in a while, the system would introduce a saviour to re-balance the irreversible accumulated conflicts between human and machines. So there have been many 'ones' already existing before Neo. With that being said, everything is scheduled by the system, including accidents or miracles. \n\n![you-are-not-the-only-one.jpeg](https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--you-are-not-the-only-one.jpeg)\n\nI can find many echos of this aspect in real daily lives. For example, you are a specialist employed by a big company. What you know is you do have some talent capabilities that the company needs eagerly at the moment. What you wouldn't know is that you're not actually in particular special from the company's perspective. You're nothing more than a product of the time when the skills you own (not yourself) is needed by a corporation. You're neither the first such a role nor the last one.\n\nAnother example. You have worked so hard in the past that eventually you achieved the golden accomplishment, which is widely considered to be a rather difficult task. But before you begin to celebrate this big event in your life, you would soon realize that you're not the only one, even not the first one who passed this narrow bridge. In fact, there have been so many people who have been there already that you could have learned from their experience to get you there quicker. \n\n---\n\n'1408' is a horror movie that relates to another analogy in my life, with a deeper impact on me. This story depicts a writer who earned his living by exploring hotels, evaluating supernatural phenomena within the room and writing books about those experiences. One day despite others' oppositions, he stepped into the the notorious room 1408, where he turned out to confronted the real trouble. There're no doubt many ghosts showing up in the film, but the strongest impression it left me is that he never escaped from that room. For a long while He thought he had managed to escape, but in fact he hadn't. He had been being trapped forever in that room.\n\n![the-room-you-never-escape-from.jpeg](https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--the-room-you-never-escape-from.jpeg)\n\nSometimes, maybe not very common, you mistakenly assumed you've waken up from a dream, but you haven't, you were still in your upset nightmare, which was really a peculiar experience. That is, however, not much worth mentioning in this case. There're more than that in our daily lives. Had you ever encountered something that was truly a tough time in your life and finally you got over it? Probably you might think it'd just gone, would never ever show up again, but it turned out to be a wrong assumption. It was still there, just like the room 1408, waiting for you to visit again. The older you get, the more experiences like that you come across. Be it a fierce fight with your spouse, a serious illness that you had to fight against, or a failure on your business despite how much endeavor you paid for it, you name it.\n\n\n\n\n","source":"_posts/two-movies-that-echos-in-my-life.md","raw":"---\nlayout: blog\ntitle: two movies that echos in my life\ndate: 2023-01-22 18:02:42\ntags: rambling\n---\n\nOut of all movies I've ever watched, there're two that didn't catch my attention at first, but always came to my mind in my later life as I grew older. They're 'The Matrix Reloaded' and '1408'.\n\n'The Matrix Reloaded' is the 2nd sequel in The Matrix series. It tells a story of the supposed saviour discovering the truth of saving the world behind the curtain. Neo, the hero who had been widely believed to be the ultimate man to help people out of the control of machines, was told by the Architect who built The Matrix that he was not the only 'One' in history. Every once in a while, the system would introduce a saviour to re-balance the irreversible accumulated conflicts between human and machines. So there have been many 'ones' already existing before Neo. With that being said, everything is scheduled by the system, including accidents or miracles. \n\n![you-are-not-the-only-one.jpeg](https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--you-are-not-the-only-one.jpeg)\n\nI can find many echos of this aspect in real daily lives. For example, you are a specialist employed by a big company. What you know is you do have some talent capabilities that the company needs eagerly at the moment. What you wouldn't know is that you're not actually in particular special from the company's perspective. You're nothing more than a product of the time when the skills you own (not yourself) is needed by a corporation. You're neither the first such a role nor the last one.\n\nAnother example. You have worked so hard in the past that eventually you achieved the golden accomplishment, which is widely considered to be a rather difficult task. But before you begin to celebrate this big event in your life, you would soon realize that you're not the only one, even not the first one who passed this narrow bridge. In fact, there have been so many people who have been there already that you could have learned from their experience to get you there quicker. \n\n---\n\n'1408' is a horror movie that relates to another analogy in my life, with a deeper impact on me. This story depicts a writer who earned his living by exploring hotels, evaluating supernatural phenomena within the room and writing books about those experiences. One day despite others' oppositions, he stepped into the the notorious room 1408, where he turned out to confronted the real trouble. There're no doubt many ghosts showing up in the film, but the strongest impression it left me is that he never escaped from that room. For a long while He thought he had managed to escape, but in fact he hadn't. He had been being trapped forever in that room.\n\n![the-room-you-never-escape-from.jpeg](https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--the-room-you-never-escape-from.jpeg)\n\nSometimes, maybe not very common, you mistakenly assumed you've waken up from a dream, but you haven't, you were still in your upset nightmare, which was really a peculiar experience. That is, however, not much worth mentioning in this case. There're more than that in our daily lives. Had you ever encountered something that was truly a tough time in your life and finally you got over it? Probably you might think it'd just gone, would never ever show up again, but it turned out to be a wrong assumption. It was still there, just like the room 1408, waiting for you to visit again. The older you get, the more experiences like that you come across. Be it a fierce fight with your spouse, a serious illness that you had to fight against, or a failure on your business despite how much endeavor you paid for it, you name it.\n\n\n\n\n","slug":"two-movies-that-echos-in-my-life","published":1,"updated":"2023-01-25T05:28:45.797Z","_id":"cld8u6m1f0000ni87duz58vva","comments":1,"photos":[],"link":"","content":"<p>Out of all movies I’ve ever watched, there’re two that didn’t catch my attention at first, but always came to my mind in my later life as I grew older. They’re ‘The Matrix Reloaded’ and ‘1408’.</p>\n<p>‘The Matrix Reloaded’ is the 2nd sequel in The Matrix series. It tells a story of the supposed saviour discovering the truth of saving the world behind the curtain. Neo, the hero who had been widely believed to be the ultimate man to help people out of the control of machines, was told by the Architect who built The Matrix that he was not the only ‘One’ in history. Every once in a while, the system would introduce a saviour to re-balance the irreversible accumulated conflicts between human and machines. So there have been many ‘ones’ already existing before Neo. With that being said, everything is scheduled by the system, including accidents or miracles. </p>\n<p><img src=\"https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--you-are-not-the-only-one.jpeg\" alt=\"you-are-not-the-only-one.jpeg\"></p>\n<p>I can find many echos of this aspect in real daily lives. For example, you are a specialist employed by a big company. What you know is you do have some talent capabilities that the company needs eagerly at the moment. What you wouldn’t know is that you’re not actually in particular special from the company’s perspective. You’re nothing more than a product of the time when the skills you own (not yourself) is needed by a corporation. You’re neither the first such a role nor the last one.</p>\n<p>Another example. You have worked so hard in the past that eventually you achieved the golden accomplishment, which is widely considered to be a rather difficult task. But before you begin to celebrate this big event in your life, you would soon realize that you’re not the only one, even not the first one who passed this narrow bridge. In fact, there have been so many people who have been there already that you could have learned from their experience to get you there quicker. </p>\n<hr>\n<p>‘1408’ is a horror movie that relates to another analogy in my life, with a deeper impact on me. This story depicts a writer who earned his living by exploring hotels, evaluating supernatural phenomena within the room and writing books about those experiences. One day despite others’ oppositions, he stepped into the the notorious room 1408, where he turned out to confronted the real trouble. There’re no doubt many ghosts showing up in the film, but the strongest impression it left me is that he never escaped from that room. For a long while He thought he had managed to escape, but in fact he hadn’t. He had been being trapped forever in that room.</p>\n<p><img src=\"https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--the-room-you-never-escape-from.jpeg\" alt=\"the-room-you-never-escape-from.jpeg\"></p>\n<p>Sometimes, maybe not very common, you mistakenly assumed you’ve waken up from a dream, but you haven’t, you were still in your upset nightmare, which was really a peculiar experience. That is, however, not much worth mentioning in this case. There’re more than that in our daily lives. Had you ever encountered something that was truly a tough time in your life and finally you got over it? Probably you might think it’d just gone, would never ever show up again, but it turned out to be a wrong assumption. It was still there, just like the room 1408, waiting for you to visit again. The older you get, the more experiences like that you come across. Be it a fierce fight with your spouse, a serious illness that you had to fight against, or a failure on your business despite how much endeavor you paid for it, you name it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Out of all movies I’ve ever watched, there’re two that didn’t catch my attention at first, but always came to my mind in my later life as I grew older. They’re ‘The Matrix Reloaded’ and ‘1408’.</p>\n<p>‘The Matrix Reloaded’ is the 2nd sequel in The Matrix series. It tells a story of the supposed saviour discovering the truth of saving the world behind the curtain. Neo, the hero who had been widely believed to be the ultimate man to help people out of the control of machines, was told by the Architect who built The Matrix that he was not the only ‘One’ in history. Every once in a while, the system would introduce a saviour to re-balance the irreversible accumulated conflicts between human and machines. So there have been many ‘ones’ already existing before Neo. With that being said, everything is scheduled by the system, including accidents or miracles. </p>\n<p><img src=\"https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--you-are-not-the-only-one.jpeg\" alt=\"you-are-not-the-only-one.jpeg\"></p>\n<p>I can find many echos of this aspect in real daily lives. For example, you are a specialist employed by a big company. What you know is you do have some talent capabilities that the company needs eagerly at the moment. What you wouldn’t know is that you’re not actually in particular special from the company’s perspective. You’re nothing more than a product of the time when the skills you own (not yourself) is needed by a corporation. You’re neither the first such a role nor the last one.</p>\n<p>Another example. You have worked so hard in the past that eventually you achieved the golden accomplishment, which is widely considered to be a rather difficult task. But before you begin to celebrate this big event in your life, you would soon realize that you’re not the only one, even not the first one who passed this narrow bridge. In fact, there have been so many people who have been there already that you could have learned from their experience to get you there quicker. </p>\n<hr>\n<p>‘1408’ is a horror movie that relates to another analogy in my life, with a deeper impact on me. This story depicts a writer who earned his living by exploring hotels, evaluating supernatural phenomena within the room and writing books about those experiences. One day despite others’ oppositions, he stepped into the the notorious room 1408, where he turned out to confronted the real trouble. There’re no doubt many ghosts showing up in the film, but the strongest impression it left me is that he never escaped from that room. For a long while He thought he had managed to escape, but in fact he hadn’t. He had been being trapped forever in that room.</p>\n<p><img src=\"https://jayson-blog.oss-cn-hangzhou.aliyuncs.com/posts/two-movies-that-echos-in-my-life--the-room-you-never-escape-from.jpeg\" alt=\"the-room-you-never-escape-from.jpeg\"></p>\n<p>Sometimes, maybe not very common, you mistakenly assumed you’ve waken up from a dream, but you haven’t, you were still in your upset nightmare, which was really a peculiar experience. That is, however, not much worth mentioning in this case. There’re more than that in our daily lives. Had you ever encountered something that was truly a tough time in your life and finally you got over it? Probably you might think it’d just gone, would never ever show up again, but it turned out to be a wrong assumption. It was still there, just like the room 1408, waiting for you to visit again. The older you get, the more experiences like that you come across. Be it a fierce fight with your spouse, a serious illness that you had to fight against, or a failure on your business despite how much endeavor you paid for it, you name it.</p>\n"}],"PostAsset":[{"_id":"source/_posts/two-movies-that-echos-in-my-life/two-movies-that-echos-in-my-life--matrix-you-are-not-the-only-one.png","slug":"two-movies-that-echos-in-my-life--matrix-you-are-not-the-only-one.png","post":"cld8u6m1f0000ni87duz58vva","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cl0sbgq7d0000u1cm8fhm8ojv","tag_id":"cl0goa5oj00005qcm74tr6gve","_id":"cl0sbgq7h0001u1cm4ec9ha3r"},{"post_id":"cl3fzuvjx0000ttcmefwb56e7","tag_id":"cl3fzuvk50002ttcm81053eld","_id":"cl3fzuvk60003ttcmgdlzckdz"},{"post_id":"cld8u6m1f0000ni87duz58vva","tag_id":"cld8u6m1g0001ni87edn8f9rw","_id":"cld8u6m1h0002ni87ebysagbx"}],"Tag":[{"name":"algorithms","_id":"cl0goa5oj00005qcm74tr6gve"},{"name":"web","_id":"cl3fzuvk50002ttcm81053eld"},{"name":"rambling","_id":"cld8u6m1g0001ni87edn8f9rw"}]}}